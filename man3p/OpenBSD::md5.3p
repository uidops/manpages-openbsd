.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OpenBSD::md5 3p"
.TH OpenBSD::md5 3p "2020-12-20" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenBSD::md5 \- simple interface to sha256 digests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use OpenBSD::md5;
\&
\&    my $sha = OpenBSD::sha\->new($filename);
\&    $k\->{$sha\->key} = $filename;
\&
\&    my $ck2 = $sha\->new($filename2);
\&
\&    if ($ck2\->equals($sha)) {
\&         ...
\&    }
\&
\&    print $sha\->stringize # provides a base64 representation
\&    my $ck3 = $s\->fromstring; # decodes both base64 and hex
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`OpenBSD::md5\*(C'\fR provides an object-oriented interface to cryptographic
hashing facilities for use in the ports tree.
.PP
In particular, it provides an abstraction to build crypto hashes from
files, convert from and to text, and compare two checksums while
keeping the user from making low-level decisions.
.PP
The module itself is called \f(CW\*(C`OpenBSD::md5\*(C'\fR for historical reasons,
but the module only provides a \f(CW\*(C`OpenBSD::sha\*(C'\fR  class, that produces
and writes sha256 digests.
.PP
The \f(CW\*(C`OpenBSD::md5\*(C'\fR class itself was removed a few years ago.
.ie n .IP "$o = $class\->new($filename)" 8
.el .IP "\f(CW$o\fR = \f(CW$class\fR\->new($filename)" 8
.IX Item "$o = $class->new($filename)"
create a new digest object from the contents of a file.
.ie n .IP "$o = $class\->fromstring($string)" 8
.el .IP "\f(CW$o\fR = \f(CW$class\fR\->fromstring($string)" 8
.IX Item "$o = $class->fromstring($string)"
create a new digest object from a string representation.
.ie n .IP "$o2 = $o\->new($filename) / $o\->fromstring($string)" 8
.el .IP "\f(CW$o2\fR = \f(CW$o\fR\->new($filename) / \f(CW$o\fR\->fromstring($string)" 8
.IX Item "$o2 = $o->new($filename) / $o->fromstring($string)"
create a new digest object \f(CW$o2\fR of the same type as \f(CW$o\fR.
.ie n .IP "$o\->equal($o2)" 8
.el .IP "\f(CW$o\fR\->equal($o2)" 8
.IX Item "$o->equal($o2)"
compare two digest objects. Returns true only if they match.
.ie n .IP "$h{$o\->key} = ..." 8
.el .IP "\f(CW$h\fR{$o\->key} = ..." 8
.IX Item "$h{$o->key} = ..."
return the actual digest as a binary string, for use as a key in hashing.
.ie n .IP "$s = $o\->stringize" 8
.el .IP "\f(CW$s\fR = \f(CW$o\fR\->stringize" 8
.IX Item "$s = $o->stringize"
convert the digest into a suitable text representation.
.ie n .IP "$o\->write($fh)" 8
.el .IP "\f(CW$o\fR\->write($fh)" 8
.IX Item "$o->write($fh)"
writes an appropriate digest annotation on a packing-list filehandle
(see \fBOpenBSD::PackingList\fR\|(3p) and \fBpkg_create\fR\|(1)).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBcksum\fR\|(1) ,
\&\fBDigest::SHA\fR\|(3p) ,
\&\fBMime::Base64\fR\|(3p)
