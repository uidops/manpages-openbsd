.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OpenBSD::PkgCfl 3p"
.TH OpenBSD::PkgCfl 3p "2020-12-20" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenBSD::PkgCfl \- "pkg_create(1)" "@conflict" handling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use OpenBSD::PkgCfl;
\&
\&    $clist = OpenBSD::PkgCfl\->make_conflicts_list($plist);
\&    @cfls = $clist\->conflicts_with(@pkgnames);
\&
\&    OpenBSD::PkgCfl::register($plist, $state);
\&    OpenBSD::PkgCfl::unregister($plist, $state);
\&    @cfls = OpenBSD::PkgCfl::find_all($plist, $state);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`OpenBSD::PkgCfl\*(C'\fR is the canonical interface to packing-list conflict
handling.
.PP
Conflict information can be extracted from a packing-list
(see OpenBSD::PackingList) through the
\&\f(CW\*(C`OpenBSD::PkgCfl\*(C'\fR class method. The result is an opaque object \f(CW$clist\fR that
can be queried to find out which package names conflict with the
packing-list.   A query of the form \f(CW\*(C`$clist\->conflicts_with(@pkgnames)\*(C'\fR
will extract from the list the package names that actually conflict with
the packing-list.
.PP
Most handling of conflict information happens through the higher level
interface: \f(CW\*(C`OpenBSD::PkgCfl::register\*(C'\fR, \f(CW\*(C`OpenBSD::PkgCfl::unregister\*(C'\fR
and \f(CW\*(C`OpenBSD::PkgCfl::find_all\*(C'\fR.  Package tools usually handle installed
packages, and this interface automatically takes the initial set of installed
packages into account. The \f(CW\*(C`register\*(C'\fR and \f(CW\*(C`unregister\*(C'\fR functions must
be used to add and remove a packing-list from the set of installed packages,
where conflict information is concerned.
.PP
The \f(CW\*(C`find_all\*(C'\fR function can be used to find out about all possible conflicts
a new packing-list will entail, before actually adding the package.
.PP
The extra argument \f(CW$state\fR is a hash used to record system-wide options.
In this case, it acts as a hidden object that records all conflict
information. The hash key \f(CW\*(C`conflict_list\*(C'\fR is reserved for that purpose.
