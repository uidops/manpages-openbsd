.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OpenBSD::Search 3p"
.TH OpenBSD::Search 3p "2020-12-20" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenBSD::Search \- package names matching framework
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use OpenBSD::Search;
\&
\&   # pkgspec objects
\&   my $search_object = OpenBSD::Search::PkgSpec\->new($pattern);
\&   my $filter_object = OpenBSD::Search::Filter\->keep_most_recent;
\&
\&   # need repository to apply to
\&
\&   use OpenBSD::PackageRepository::Installed;
\&
\&   my $inst = OpenBSD::PackageRepository::Installed\->new;
\&
\&   my $list_ref = $inst\->match_locations($search_object, $filter_object);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`OpenBSD::Search\*(C'\fR provides a search infrastructure
for \f(CW\*(C`OpenBSD::PackageRepository\*(C'\fR objects.
.PP
A given repository can be searched for existing packages using
\&\f(CW\*(C`$repo\->match_locations($search1, $filter1, ...);\*(C'\fR
.PP
It returns a reference to a list of matching \f(CW\*(C`OpenBSD::PackageLocation\*(C'\fR
objects.
.PP
A repository list can be searched in a similar way: the search
proceeds through each repository in the list, and stops as soon
as it finds a non-empty match (similar to \f(CW\*(C`ld \-L\*(C'\fR rules).
.PP
The first search object \f(CW$search\fR is used to find the basic set
of matching packages, and further objects are used to weed out
unwanted elements from the list.
.PP
Complex searches must be built as lists of filter objects, in
order to preserve RepositoryList semantics, and ensure the correct
non-empty first match is returned.
.PP
The infrastructure provides the following objects:
.IP "OpenBSD::Search::PkgSpec" 4
.IX Item "OpenBSD::Search::PkgSpec"
\&\f(CW\*(C`OpenBSD::PkgSpec\*(C'\fR filters.
.IP "OpenBSD::Search::Stem" 4
.IX Item "OpenBSD::Search::Stem"
finds all packages with a given stem.
.IP "OpenBSD::Search::PartialStem" 4
.IX Item "OpenBSD::Search::PartialStem"
finds all packages including a partial stem.
.IP "OpenBSD::Search::Filter" 4
.IX Item "OpenBSD::Search::Filter"
filters package list through further tests.
