.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::Compare 3p"
.TH File::Compare 3p "2009-10-12" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Compare \- Compare files or filehandles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use File::Compare;
\&
\&        if (compare("file1","file2") == 0) {
\&            print "They\*(Aqre equal\en";
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The File::Compare::compare function compares the contents of two
sources, each of which can be a file or a file handle.  It is exported
from File::Compare by default.
.PP
File::Compare::cmp is a synonym for File::Compare::compare.  It is
exported from File::Compare only by request.
.PP
File::Compare::compare_text does a line by line comparison of the two
files. It stops as soon as a difference is detected. \fBcompare_text()\fR
accepts an optional third argument: This must be a \s-1CODE\s0 reference to
a line comparison function, which returns 0 when both lines are considered
equal. For example:
.PP
.Vb 1
\&    compare_text($file1, $file2)
.Ve
.PP
is basically equivalent to
.PP
.Vb 1
\&    compare_text($file1, $file2, sub {$_[0] ne $_[1]} )
.Ve
.SH "RETURN"
.IX Header "RETURN"
File::Compare::compare and its sibling functions return 0 if the files
are equal, 1 if the files are unequal, or \-1 if an error was encountered.
.SH "AUTHOR"
.IX Header "AUTHOR"
File::Compare was written by Nick Ing-Simmons.
Its original documentation was written by Chip Salzenberg.
