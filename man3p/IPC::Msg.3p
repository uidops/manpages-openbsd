.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IPC::Msg 3p"
.TH IPC::Msg 3p "2019-02-13" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IPC::Msg \- SysV Msg IPC object class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use IPC::SysV qw(IPC_PRIVATE S_IRUSR S_IWUSR);
\&    use IPC::Msg;
\&
\&    $msg = IPC::Msg\->new(IPC_PRIVATE, S_IRUSR | S_IWUSR);
\&
\&    $msg\->snd($msgtype, $msgdata);
\&
\&    $msg\->rcv($buf, 256);
\&
\&    $ds = $msg\->stat;
\&
\&    $msg\->remove;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A class providing an object based interface to SysV \s-1IPC\s0 message queues.
.SH "METHODS"
.IX Header "METHODS"
.IP "new ( \s-1KEY , FLAGS\s0 )" 4
.IX Item "new ( KEY , FLAGS )"
Creates a new message queue associated with \f(CW\*(C`KEY\*(C'\fR. A new queue is
created if
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`KEY\*(C'\fR is equal to \f(CW\*(C`IPC_PRIVATE\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`KEY\*(C'\fR does not already have a message queue associated with
it, and \f(CW\*(C`\f(CIFLAGS\f(CW & IPC_CREAT\*(C'\fR is true.
.RE
.RS 4
.Sp
On creation of a new message queue \f(CW\*(C`FLAGS\*(C'\fR is used to set the
permissions.  Be careful not to set any flags that the Sys V
\&\s-1IPC\s0 implementation does not allow: in some systems setting
execute bits makes the operations fail.
.RE
.IP "id" 4
.IX Item "id"
Returns the system message queue identifier.
.IP "rcv ( \s-1BUF, LEN\s0 [, \s-1TYPE\s0 [, \s-1FLAGS\s0 ]] )" 4
.IX Item "rcv ( BUF, LEN [, TYPE [, FLAGS ]] )"
Read a message from the queue. Returns the type of the message read.
See \fBmsgrcv\fR\|(2).  The \s-1BUF\s0 becomes tainted.
.IP "remove" 4
.IX Item "remove"
Remove and destroy the message queue from the system.
.IP "set ( \s-1STAT\s0 )" 4
.IX Item "set ( STAT )"
.PD 0
.IP "set ( \s-1NAME\s0 => \s-1VALUE\s0 [, \s-1NAME\s0 => \s-1VALUE ...\s0] )" 4
.IX Item "set ( NAME => VALUE [, NAME => VALUE ...] )"
.PD
\&\f(CW\*(C`set\*(C'\fR will set the following values of the \f(CW\*(C`stat\*(C'\fR structure associated
with the message queue.
.Sp
.Vb 4
\&    uid
\&    gid
\&    mode (oly the permission bits)
\&    qbytes
.Ve
.Sp
\&\f(CW\*(C`set\*(C'\fR accepts either a stat object, as returned by the \f(CW\*(C`stat\*(C'\fR method,
or a list of \fIname\fR\-\fIvalue\fR pairs.
.IP "snd ( \s-1TYPE, MSG\s0 [, \s-1FLAGS\s0 ] )" 4
.IX Item "snd ( TYPE, MSG [, FLAGS ] )"
Place a message on the queue with the data from \f(CW\*(C`MSG\*(C'\fR and with type \f(CW\*(C`TYPE\*(C'\fR.
See \fBmsgsnd\fR\|(2).
.IP "stat" 4
.IX Item "stat"
Returns an object of type \f(CW\*(C`IPC::Msg::stat\*(C'\fR which is a sub-class of
\&\f(CW\*(C`Class::Struct\*(C'\fR. It provides the following fields. For a description
of these fields see you system documentation.
.Sp
.Vb 12
\&    uid
\&    gid
\&    cuid
\&    cgid
\&    mode
\&    qnum
\&    qbytes
\&    lspid
\&    lrpid
\&    stime
\&    rtime
\&    ctime
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IPC::SysV, Class::Struct
.SH "AUTHORS"
.IX Header "AUTHORS"
Graham Barr <gbarr@pobox.com>,
Marcus Holland-Moritz <mhx@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Version 2.x, Copyright (C) 2007\-2013, Marcus Holland-Moritz.
.PP
Version 1.x, Copyright (c) 1997, Graham Barr.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
