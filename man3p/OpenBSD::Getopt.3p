.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OpenBSD::Getopt 3p"
.TH OpenBSD::Getopt 3p "2020-12-20" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenBSD::Getopt \- Process single\-characters switches
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use OpenBSD::Getopt;
\&
\&   our($opt_o, $opt_i, $opt_f, $opt_v);
\&   getopts(\*(Aqoifv:\*(Aq,
\&        { \*(Aqv\*(Aq => sub {
\&                ++$opt_v;}
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is similar to \fBgetopt\fR\|(3). One call to \f(CW\*(C`getopts($optstring)\*(C'\fR parses
all the options using the \f(CW$optstring\fR as a list of simple switches
(letter) and switches with arguments (letter followed by \f(CW\*(C`:\*(C'\fR).
.PP
Option values are directly written into local variables of the form
\&\f(CW$opt_S\fR, where \f(CW\*(C`S\*(C'\fR is the switch name.
.PP
Contrary to \fBgetopt\fR\|(3), \f(CW$opt_S\fR is incremented each time the switch is
seen, to allow for stuff like \f(CW\*(C`\-vv\*(C'\fR.
.PP
An optional hash can be used as a second argument, with switches as keys
and subs as values. When a switch is met, the sub \f(CW$foo\fR is called as
\&\f(CW$foo\fR for a simple switch and as \f(CW\*(C`$foo(option_value)\*(C'\fR for a switch
with argument.
