.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OpenBSD::Pledge 3p"
.TH OpenBSD::Pledge 3p "2021-06-10" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenBSD::Pledge \- Perl interface to OpenBSD pledge(2)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use OpenBSD::Pledge;
\&
\&  my $file = "/usr/share/dict/words";
\&  pledge( qw( rpath ) ) || die "Unable to pledge: $!";
\&  open my $fh, \*(Aq<\*(Aq, $file or die "Unable to open $file: $!";
\&
\&  pledge() || die "Unable to pledge again: $!";
\&  print grep { /pledge/i } readline($fh);
\&  close $fh;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a perl interface to OpenBSD's \fBpledge\fR\|(2) \fBsyscall\fR\|(2).
.PP
Once you promise that your program will only use certain syscalls
the kernel will kill the program if it attempts to call any other
interfaces.
.SH "EXPORT"
.IX Header "EXPORT"
Exports \*(L"pledge\*(R" by default.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "pledge"
.IX Subsection "pledge"
Perl interface to \fBpledge\fR\|(2).
.PP
.Vb 1
\&        pledge(@promises)
.Ve
.PP
The \*(L"stdio\*(R" promise is always implied,
as \fBperl\fR\|(1) itself is useless without it.
.PP
Returns true on success, returns false and sets $! on failure
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Perl is particularly fond of \f(CW\*(C`stdio\*(C'\fR so that promise is always added by
\&\*(L"pledge\*(R".
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBpledge\fR\|(2)
.PP
<http://man.openbsd.org/pledge.2>
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrew Hewus Fresh, <afresh1@OpenBSD.org>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (C) 2015,2021 by Andrew Hewus Fresh <afresh1@OpenBSD.org>
.PP
Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\s0
