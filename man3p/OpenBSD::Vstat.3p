.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OpenBSD::Vstat 3p"
.TH OpenBSD::Vstat 3p "2020-12-20" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenBSD::Vstat \- virtual filesystem for "pkg_add(1)" simulations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use OpenBSD::Vstat;
\&
\&    my $v = OpenBSD::Vstat\->new($state);
\&
\&    $h = $v\->add($filename, $size, $tag);
\&    $v\->remove($filename, $size);
\&    $e = $v\->exists($filename);
\&    $v\->tally;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`OpenBSD::Vstat\*(C'\fR provides methods to layout a virtual file system on top
of the real one.  This is generally used to simulate file system manipulations
before doing them for real.
.PP
The constructor \f(CW\*(C`new\*(C'\fR expect a \f(CW$state\fR object, that is, an object with
\&\f(CW\*(C`$state\->{not}\*(C'\fR and \f(CW\*(C`$state\->errsay\*(C'\fR defined.
.PP
Operations on the \f(CW\*(C`Vstat\*(C'\fR object can modify \f(CW\*(C`$state\->{problems}\*(C'\fR
and \f(CW\*(C`$state\->{overflow}\*(C'\fR.
.PP
The method \f(CW\*(C`add\*(C'\fR (respectively \f(CW\*(C`remove\*(C'\fR) can be used to add a filename to
the file system (resp. remove a filename from the file system).
The method \f(CW\*(C`exists\*(C'\fR looks for
a given filename: first it checks if it has been added or removed in
the virtual filesystem. Failing that, it looks into the real file system
using \f(CW\*(C`\-e\*(C'\fR.
.PP
Both \f(CW\*(C`add\*(C'\fR and \f(CW\*(C`remove\*(C'\fR also know about
Unix filesystem semantics, namely \f(CWmount(8)\fR points and disk usage.
They return a small object corresponding to the filename's file system with
the following methods
.IP "ro" 8
.IX Item "ro"
defined if the filesystem is read-only. Usually hard to add files there.
.IP "nodev" 8
.IX Item "nodev"
defined if the filesystem forbids devices.
.IP "noexec" 8
.IX Item "noexec"
defined if the filesystem forbids execution.
.IP "nosuid" 8
.IX Item "nosuid"
defined if the filesystem forbids \s-1SUID\s0 files.
.IP "avail" 8
.IX Item "avail"
returns the number of bytes still available on the filesystem.
.PP
\&\f(CW\*(C`exists\*(C'\fR returns a true value if the filename exists.
If it is a virtual name added through \f(CW\*(C`add\*(C'\fR, it returns
the \f(CW$tag\fR specified as an optional argument. Otherwise, it returns 1.
.PP
\&\f(CW\*(C`tally\*(C'\fR displays a summary of filesystem manipulations
after a series of additions and removals.
.PP
Due to the way packages get updated, size modifications through
\&\f(CW\*(C`remove\*(C'\fR are delayed until the next call to
\&\f(CW\*(C`synchronize\*(C'\fR: old files must be removed before
adding the new files in order to properly account for collisions,
but the old files occupy disk space while the new package gets extracted.
.PP
Modifications to the virtual file system are stored until a call to
\&\f(CW\*(C`synchronize\*(C'\fR, which assumes the real file system will get those changes
(and thus we can forget them), or \f(CW\*(C`drop_changes\*(C'\fR, which assumes the changes
won't get through, thus providing transactional semantics.
.PP
In case of file system overflow, \f(CW\*(C`remove_first\*(C'\fR can be used to indicate
file removal happens before the creation of new files.
.PP
Typical use is as follows:
	do lot of changes to the Vstat object
	check for overflow.
	if so, drop_changes.
	redo the changes, with remove_first used instead of remove.
.PP
In case \f(CW\*(C`$state\->{not}\*(C'\fR is true, the real file system will never store
changes, and thus the \f(CW\*(C`Vstat\*(C'\fR object is layered to allow full transactional
back-out.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
\&\f(CW\*(C`OpenBSD::Vstat\*(C'\fR now handles \f(CWchroot(8)\fR situations gracefully, but
it doesn't know about symbolic links to directories and will report bogus
results in complicated cases.
.PP
\&\f(CW\*(C`OpenBSD::Vstat\*(C'\fR needs an interface to deal with removed directories that
get replaced with files. Currently, it will report a conflict.
