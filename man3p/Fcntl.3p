.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Fcntl 3p"
.TH Fcntl 3p "2017-02-05" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Fcntl \- load the C Fcntl.h defines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Fcntl;
\&    use Fcntl qw(:DEFAULT :flock);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is just a translation of the C \fIfcntl.h\fR file.
Unlike the old mechanism of requiring a translated \fIfcntl.ph\fR
file, this uses the \fBh2xs\fR program (see the Perl source distribution)
and your native C compiler.  This means that it has a 
far more likely chance of getting the numbers right.
.SH "NOTE"
.IX Header "NOTE"
Only \f(CW\*(C`#define\*(C'\fR symbols get translated; you must still correctly
pack up your own arguments to pass as args for locking functions, etc.
.SH "EXPORTED SYMBOLS"
.IX Header "EXPORTED SYMBOLS"
By default your system's F_* and O_* constants (eg, F_DUPFD and
O_CREAT) and the \s-1FD_CLOEXEC\s0 constant are exported into your namespace.
.PP
You can request that the \fBflock()\fR constants (\s-1LOCK_SH, LOCK_EX, LOCK_NB\s0
and \s-1LOCK_UN\s0) be provided by using the tag \f(CW\*(C`:flock\*(C'\fR.  See Exporter.
.PP
You can request that the old constants (\s-1FAPPEND, FASYNC, FCREAT,
FDEFER, FEXCL, FNDELAY, FNONBLOCK, FSYNC, FTRUNC\s0) be provided for
compatibility reasons by using the tag \f(CW\*(C`:Fcompat\*(C'\fR.  For new
applications the newer versions of these constants are suggested
(O_APPEND, O_ASYNC, O_CREAT, O_DEFER, O_EXCL, O_NDELAY, O_NONBLOCK,
O_SYNC, O_TRUNC).
.PP
For ease of use also the SEEK_* constants (for \fBseek()\fR and \fBsysseek()\fR,
e.g. \s-1SEEK_END\s0) and the S_I* constants (for \fBchmod()\fR and \fBstat()\fR) are
available for import.  They can be imported either separately or using
the tags \f(CW\*(C`:seek\*(C'\fR and \f(CW\*(C`:mode\*(C'\fR.
.PP
Please refer to your native \fBfcntl\fR\|(2), \fBopen\fR\|(2), \fBfseek\fR\|(3), \fBlseek\fR\|(2)
(equal to Perl's \fBseek()\fR and \fBsysseek()\fR, respectively), and \fBchmod\fR\|(2)
documentation to see what constants are implemented in your system.
.PP
See perlopentut to learn about the uses of the O_* constants
with \fBsysopen()\fR.
.PP
See \*(L"seek\*(R" in perlfunc and \*(L"sysseek\*(R" in perlfunc about the SEEK_* constants.
.PP
See \*(L"stat\*(R" in perlfunc about the S_I* constants.
