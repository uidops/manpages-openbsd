.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OpenBSD::RequiredBy 3p"
.TH OpenBSD::RequiredBy 3p "2020-12-20" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenBSD::RequiredBy \- manage installed package dependencies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use OpenBSD::RequiredBy;
\&
\&
\&    # let\*(Aqs do things for real
\&    our $not = 0;
\&
\&    my $o = OpenBSD::RequiredBy\->new($pkgname);
\&
\&    my $o2 = OpenBSD::Requiring\->new($pkgname);
\&
\&    print "Requirements for $pkgname are ", join(\*(Aq \*(Aq,$o2\->list), "\en";
\&
\&    # add some reverse dependencies
\&    $o\->add($reverse_dep1, $reverse_dep2);
\&
\&    # remove some dependency
\&    $o2\->delete($dep);
\&
\&    # forget some cache entry
\&    OpenBSD::RequiredBy\->forget(installed_info($pkgname));
\&
\&    # compute the transitive closure of some dependencies
\&    my @fulldeps = OpenBSD::Requiring\->compute_closure($pkg1, $pkg2);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`OpenBSD::RequiredBy\*(C'\fR handles lists of forward and reverse dependencies
for installed packages.
.PP
If \f(CW$main::not\fR is true, all change operations are done internally and
never written to disk.
.PP
\&\f(CW\*(C`$o = OpenBSD::RequiredBy\->new($pkgname)\*(C'\fR gives access to the reverse
dependencies,
\&\f(CW\*(C`$o =OpenBSD::Requiring\->new($pkgname)\*(C'\fR  gives access to the forward
dependencies.
.PP
Such an object can be used to list the dependencies \f(CW\*(C`$o\->list\*(C'\fR,
add names to them \f(CW\*(C`$o\->add(name1, name2, ...)\*(C'\fR or remove name from
them \f(CW\*(C`$o\->delete(name1, name2, ...)\*(C'\fR.
.PP
The full list of forward dependencies (transitive closure) from a set of
packages is given by
\&\f(CW\*(C`OpenBSD::RequiredBy\->compute_closure($name1, name2, ...)\*(C'\fR.
Likewise,
\&\f(CW\*(C`OpenBSD::Requiring\->compute_closure($name1, name2, ...)\*(C'\fR
yields the list of reverse dependencies.
.PP
Those lists of dependencies trim duplicates and, unless \f(CW$main::not\fR is true,
disk files are automatically synchronized whenever the lists change.
.PP
\&\f(CW\*(C`OpenBSD::RequiredBy\*(C'\fR maintains a cache for efficiency. When an
installed package is deleted completely,
\&\f(CW\*(C`OpenBSD::RequiredBy\->forget($dir)\*(C'\fR and
\&\f(CW\*(C`OpenBSD::Requiring\->forget($dir)\*(C'\fR will remove the cache entries.
