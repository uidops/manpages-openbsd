.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "User::grent 3p"
.TH User::grent 3p "2019-12-30" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
User::grent \- by\-name interface to Perl's built\-in getgr*() functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& use User::grent;
\& $gr = getgrgid(0) or die "No group zero";
\& if ( $gr\->name eq \*(Aqwheel\*(Aq && @{$gr\->members} > 1 ) {
\&     print "gid zero name wheel, with other members";
\& } 
\&
\& use User::grent qw(:FIELDS);
\& getgrgid(0) or die "No group zero";
\& if ( $gr_name eq \*(Aqwheel\*(Aq && @gr_members > 1 ) {
\&     print "gid zero name wheel, with other members";
\& } 
\&
\& $gr = getgr($whoever);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module's default exports override the core \fBgetgrent()\fR, \fBgetgrgid()\fR,
and \fBgetgrnam()\fR functions, replacing them with versions that return
\&\*(L"User::grent\*(R" objects.  This object has methods that return the similarly
named structure field name from the C's passwd structure from \fIgrp.h\fR; 
namely name, passwd, gid, and members (not mem).  The first three
return scalars, the last an array reference.
.PP
You may also import all the structure fields directly into your namespace
as regular variables using the :FIELDS import tag.  (Note that this still
overrides your core functions.)  Access these fields as variables named
with a preceding \f(CW\*(C`gr_\*(C'\fR.  Thus, \f(CW\*(C`$group_obj\->gid()\*(C'\fR corresponds
to \f(CW$gr_gid\fR if you import the fields.  Array references are available as
regular array variables, so \f(CW\*(C`@{ $group_obj\->members() }\*(C'\fR would be
simply \f(CW@gr_members\fR.
.PP
The \fBgetgr()\fR function is a simple front-end that forwards a numeric
argument to \fBgetgrgid()\fR and the rest to \fBgetgrnam()\fR.
.PP
To access this functionality without the core overrides,
pass the \f(CW\*(C`use\*(C'\fR an empty import list, and then access
function functions with their full qualified names.
On the other hand, the built-ins are still available
via the \f(CW\*(C`CORE::\*(C'\fR pseudo-package.
.SH "NOTE"
.IX Header "NOTE"
While this class is currently implemented using the Class::Struct
module to build a struct-like class, you shouldn't rely upon this.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tom Christiansen
