.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Dict 3p"
.TH Search::Dict 3p "2014-03-24" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Dict \- look \- search for key in dictionary file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Search::Dict;
\&    look *FILEHANDLE, $key, $dict, $fold;
\&
\&    use Search::Dict;
\&    look *FILEHANDLE, $params;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sets file position in \s-1FILEHANDLE\s0 to be first line greater than or equal
(stringwise) to \fI\f(CI$key\fI\fR.  Returns the new file position, or \-1 if an error
occurs.
.PP
The flags specify dictionary order and case folding:
.PP
If \fI\f(CI$dict\fI\fR is true, search by dictionary order (ignore anything but word
characters and whitespace).  The default is honour all characters.
.PP
If \fI\f(CI$fold\fI\fR is true, ignore case.  The default is to honour case.
.PP
If there are only three arguments and the third argument is a hash
reference, the keys of that hash can have values \f(CW\*(C`dict\*(C'\fR, \f(CW\*(C`fold\*(C'\fR, and
\&\f(CW\*(C`comp\*(C'\fR or \f(CW\*(C`xfrm\*(C'\fR (see below), and their corresponding values will be
used as the parameters.
.PP
If a comparison subroutine (comp) is defined, it must return less than zero,
zero, or greater than zero, if the first comparand is less than,
equal, or greater than the second comparand.
.PP
If a transformation subroutine (xfrm) is defined, its value is used to
transform the lines read from the filehandle before their comparison.
