.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "B::Terse 3p"
.TH B::Terse 3p "2019-12-30" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
B::Terse \- Walk Perl syntax tree, printing terse info about ops
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        perl \-MO=Terse[,OPTIONS] foo.pl
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module prints the contents of the parse tree, but without as much
information as \s-1CPAN\s0 module B::Debug.  For comparison, \f(CW\*(C`print "Hello, world."\*(C'\fR
produced 96 lines of output from B::Debug, but only 6 from B::Terse.
.PP
This module is useful for people who are writing their own back end,
or who are learning about the Perl internals.  It's not useful to the
average programmer.
.PP
This version of B::Terse is really just a wrapper that calls B::Concise
with the \fB\-terse\fR option. It is provided for compatibility with old scripts
(and habits) but using B::Concise directly is now recommended instead.
.PP
For compatibility with the old B::Terse, this module also adds a
method named \f(CW\*(C`terse\*(C'\fR to B::OP and B::SV objects. The B::SV method is
largely compatible with the old one, though authors of new software
might be advised to choose a more user-friendly output format. The
B::OP \f(CW\*(C`terse\*(C'\fR method, however, doesn't work well. Since B::Terse was
first written, much more information in OPs has migrated to the
scratchpad datastructure, but the \f(CW\*(C`terse\*(C'\fR interface doesn't have any
way of getting to the correct pad. As a kludge, the new version will
always use the pad for the main program, but for OPs in subroutines
this will give the wrong answer or crash.
.SH "AUTHOR"
.IX Header "AUTHOR"
The original version of B::Terse was written by Malcolm Beattie,
<mbeattie@sable.ox.ac.uk>. This wrapper was written by Stephen
McCamant, <smcc@MIT.EDU>.
