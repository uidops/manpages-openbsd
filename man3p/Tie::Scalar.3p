.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tie::Scalar 3p"
.TH Tie::Scalar 3p "2021-03-02" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tie::Scalar, Tie::StdScalar \- base class definitions for tied scalars
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package NewScalar;
\&    require Tie::Scalar;
\&
\&    @ISA = qw(Tie::Scalar);
\&
\&    sub FETCH { ... }           # Provide a needed method
\&    sub TIESCALAR { ... }       # Overrides inherited method
\&
\&
\&    package NewStdScalar;
\&    require Tie::Scalar;
\&
\&    @ISA = qw(Tie::StdScalar);
\&
\&    # All methods provided by default, so define
\&    # only what needs be overridden
\&    sub FETCH { ... }
\&
\&
\&    package main;
\&
\&    tie $new_scalar, \*(AqNewScalar\*(Aq;
\&    tie $new_std_scalar, \*(AqNewStdScalar\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides some skeletal methods for scalar-tying classes. See
perltie for a list of the functions required in tying a scalar to a
package. The basic \fBTie::Scalar\fR package provides a \f(CW\*(C`new\*(C'\fR method, as well
as methods \f(CW\*(C`TIESCALAR\*(C'\fR, \f(CW\*(C`FETCH\*(C'\fR and \f(CW\*(C`STORE\*(C'\fR. The \fBTie::StdScalar\fR
package provides all the methods specified in  perltie. It inherits from
\&\fBTie::Scalar\fR and causes scalars tied to it to behave exactly like the
built-in scalars, allowing for selective overloading of methods. The \f(CW\*(C`new\*(C'\fR
method is provided as a means of grandfathering, for classes that forget to
provide their own \f(CW\*(C`TIESCALAR\*(C'\fR method.
.PP
For developers wishing to write their own tied-scalar classes, the methods
are summarized below. The perltie section not only documents these, but
has sample code as well:
.IP "\s-1TIESCALAR\s0 classname, \s-1LIST\s0" 4
.IX Item "TIESCALAR classname, LIST"
The method invoked by the command \f(CW\*(C`tie $scalar, classname\*(C'\fR. Associates a new
scalar instance with the specified class. \f(CW\*(C`LIST\*(C'\fR would represent additional
arguments (along the lines of AnyDBM_File and compatriots) needed to
complete the association.
.IP "\s-1FETCH\s0 this" 4
.IX Item "FETCH this"
Retrieve the value of the tied scalar referenced by \fIthis\fR.
.IP "\s-1STORE\s0 this, value" 4
.IX Item "STORE this, value"
Store data \fIvalue\fR in the tied scalar referenced by \fIthis\fR.
.IP "\s-1DESTROY\s0 this" 4
.IX Item "DESTROY this"
Free the storage associated with the tied scalar referenced by \fIthis\fR.
This is rarely needed, as Perl manages its memory quite well. But the
option exists, should a class wish to perform specific actions upon the
destruction of an instance.
.SS "Tie::Scalar vs Tie::StdScalar"
.IX Subsection "Tie::Scalar vs Tie::StdScalar"
\&\f(CW\*(C`Tie::Scalar\*(C'\fR provides all the necessary methods, but one should realize
they do not do anything useful. Calling \f(CW\*(C`Tie::Scalar::FETCH\*(C'\fR or 
\&\f(CW\*(C`Tie::Scalar::STORE\*(C'\fR results in a (trappable) croak. And if you inherit
from \f(CW\*(C`Tie::Scalar\*(C'\fR, you \fImust\fR provide either a \f(CW\*(C`new\*(C'\fR or a
\&\f(CW\*(C`TIESCALAR\*(C'\fR method.
.PP
If you are looking for a class that does everything for you that you don't
define yourself, use the \f(CW\*(C`Tie::StdScalar\*(C'\fR class, not the
\&\f(CW\*(C`Tie::Scalar\*(C'\fR one.
.SH "MORE INFORMATION"
.IX Header "MORE INFORMATION"
The perltie section uses a good example of tying scalars by associating
process IDs with priority.
