.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "locale 3p"
.TH locale 3p "2017-02-05" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
locale \- Perl pragma to use or avoid POSIX locales for built\-in operations
.SH "WARNING"
.IX Header "WARNING"
\&\s-1DO NOT USE\s0 this pragma in scripts that have multiple
threads active.  The locale is not local to a single thread.
Another thread may change the locale at any time, which could cause at a
minimum that a given thread is operating in a locale it isn't expecting
to be in.  On some platforms, segfaults can also occur.  The locale
change need not be explicit; some operations cause perl to change the
locale itself.  You are vulnerable simply by having done a \f(CW"use
locale"\fR.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    @x = sort @y;      # Native\-platform/Unicode code point sort order
\&    {
\&        use locale;
\&        @x = sort @y;  # Locale\-defined sort order
\&    }
\&    @x = sort @y;      # Native\-platform/Unicode code point sort order
\&                       # again
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This pragma tells the compiler to enable (or disable) the use of \s-1POSIX\s0
locales for built-in operations (for example, \s-1LC_CTYPE\s0 for regular
expressions, \s-1LC_COLLATE\s0 for string comparison, and \s-1LC_NUMERIC\s0 for number
formatting).  Each \*(L"use locale\*(R" or \*(L"no locale\*(R"
affects statements to the end of the enclosing \s-1BLOCK.\s0
.PP
See perllocale for more detailed information on how Perl supports
locales.
.PP
On systems that don't have locales, this pragma will cause your operations
to behave as if in the \*(L"C\*(R" locale; attempts to change the locale will fail.
