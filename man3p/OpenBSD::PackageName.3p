.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OpenBSD::PackageName 3p"
.TH OpenBSD::PackageName 3p "2020-12-20" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenBSD::PackageName \- package names handling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use OpenBSD::PackageName;
\&
\&   $pkgname = OpenBSD::PackageName::url2pkgname($url);
\&
\&   ($stem, $version, @flavors) = OpenBSD::PackageName::splitname($pkgname);
\&   $stem = OpenBSD::PackageName::splitstem($pkgname);
\&
\&   OpenBSD::PackageName::is_stem($stem) == 1;
\&   OpenBSD::PackageName::is_stem($pkgname) == 0;
\&
\&   @candidates = OpenBSD::PackageName::findstem($stem, @pkgnames);
\&   # alternate interface
\&   $h = OpenBSD::PackageName::compile_stemlist(@pkgnames);
\&   @candidates = $h\->findstem($stem);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`OpenBSD::PackageName\*(C'\fR is the canonical interface to package names
handling.
.ie n .IP """OpenBSD::PackageName::url2pkgname($url)""" 4
.el .IP "\f(CWOpenBSD::PackageName::url2pkgname($url)\fR" 4
.IX Item "OpenBSD::PackageName::url2pkgname($url)"
strip an \f(CW$url\fR of path elements and \f(CW\*(C`.tgz\*(C'\fR suffixes, yield a canonicalized
package name.
.ie n .IP """OpenBSD::PackageName::splitname($pkgname)""" 4
.el .IP "\f(CWOpenBSD::PackageName::splitname($pkgname)\fR" 4
.IX Item "OpenBSD::PackageName::splitname($pkgname)"
split a \f(CW$pkgname\fR into a \f(CW$stem\fR, a \f(CW$version\fR number, and a (possibly
empty) list of \f(CW@flavors\fR components.  If the name contains no identifiable
version, \f(CW$version\fR will be \f(CW\*(C`undef\*(C'\fR.
.ie n .IP """OpenBSD::PackageName::splitstem($pkgname)""" 4
.el .IP "\f(CWOpenBSD::PackageName::splitstem($pkgname)\fR" 4
.IX Item "OpenBSD::PackageName::splitstem($pkgname)"
short version of \f(CW\*(C`splitname\*(C'\fR that extracts only the \f(CW$stem\fR.
.ie n .IP """OpenBSD::PackageName::is_stem($string)""" 4
.el .IP "\f(CWOpenBSD::PackageName::is_stem($string)\fR" 4
.IX Item "OpenBSD::PackageName::is_stem($string)"
check whether a \f(CW$string\fR is a valid stem, as opposed to a full package name.
Useful for commands that take either full names or stems, and need to
reconstruct the full name from the stem.
.ie n .IP """OpenBSD::PackageName::findstem($stem, @pkgnames)""" 4
.el .IP "\f(CWOpenBSD::PackageName::findstem($stem, @pkgnames)\fR" 4
.IX Item "OpenBSD::PackageName::findstem($stem, @pkgnames)"
look up a \f(CW$stem\fR into a list of \f(CW@pkgnames\fR. Return a list of candidates
for further processing.
.ie n .IP """OpenBSD::PackageName::compile_stemlist(@pkgnames)""" 4
.el .IP "\f(CWOpenBSD::PackageName::compile_stemlist(@pkgnames)\fR" 4
.IX Item "OpenBSD::PackageName::compile_stemlist(@pkgnames)"
alternate interface that is faster when lots of look ups are involved.
Compile a list of \f(CW@pkgnames\fR into an object \f(CW$h\fR that can be queried
using \f(CW\*(C`$h\->findstem($stem)\*(C'\fR.
