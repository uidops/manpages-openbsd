.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Pod::Simple::Methody 3p"
.TH Pod::Simple::Methody 3p "2021-03-02" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Simple::Methody \-\- turn Pod::Simple events into method calls
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& require 5;
\& use strict;
\& package SomePodFormatter;
\& use base qw(Pod::Simple::Methody);
\&
\& sub handle_text {
\&   my($self, $text) = @_;
\&   ...
\& }
\&
\& sub start_head1 {
\&   my($self, $attrs) = @_;
\&   ...
\& }
\& sub end_head1 {
\&   my($self) = @_;
\&   ...
\& }
.Ve
.PP
\&...and start_/end_ methods for whatever other events you want to catch.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is of
interest to people writing Pod formatters based on Pod::Simple.
.PP
This class (which is very small \*(-- read the source) overrides
Pod::Simple's _handle_element_start, _handle_text, and
_handle_element_end methods so that parser events are turned into method
calls. (Otherwise, this is a subclass of Pod::Simple and inherits all
its methods.)
.PP
You can use this class as the base class for a Pod formatter/processor.
.SH "METHOD CALLING"
.IX Header "METHOD CALLING"
When Pod::Simple sees a \*(L"=head1 Hi there\*(R", for example, it basically does
this:
.PP
.Vb 3
\&  $parser\->_handle_element_start( "head1", \e%attributes );
\&  $parser\->_handle_text( "Hi there" );
\&  $parser\->_handle_element_end( "head1" );
.Ve
.PP
But if you subclass Pod::Simple::Methody, it will instead do this
when it sees a \*(L"=head1 Hi there\*(R":
.PP
.Vb 3
\&  $parser\->start_head1( \e%attributes ) if $parser\->can(\*(Aqstart_head1\*(Aq);
\&  $parser\->handle_text( "Hi there" )   if $parser\->can(\*(Aqhandle_text\*(Aq);
\&  $parser\->end_head1()                 if $parser\->can(\*(Aqend_head1\*(Aq);
.Ve
.PP
If Pod::Simple sends an event where the element name has a dash,
period, or colon, the corresponding method name will have a underscore
in its place.  For example, \*(L"foo.bar:baz\*(R" becomes start_foo_bar_baz
and end_foo_bar_baz.
.PP
See the source for Pod::Simple::Text for an example of using this class.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Pod::Simple, Pod::Simple::Subclassing
.SH "SUPPORT"
.IX Header "SUPPORT"
Questions or discussion about \s-1POD\s0 and Pod::Simple should be sent to the
pod\-people@perl.org mail list. Send an empty email to
pod\-people\-subscribe@perl.org to subscribe.
.PP
This module is managed in an open GitHub repository,
<https://github.com/perl\-pod/pod\-simple/>. Feel free to fork and contribute, or
to clone <git://github.com/perl\-pod/pod\-simple.git> and send patches!
.PP
Patches against Pod::Simple are welcome. Please send bug reports to
<bug\-pod\-simple@rt.cpan.org>.
.SH "COPYRIGHT AND DISCLAIMERS"
.IX Header "COPYRIGHT AND DISCLAIMERS"
Copyright (c) 2002 Sean M. Burke.
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pod::Simple was created by Sean M. Burke <sburke@cpan.org>.
But don't bother him, he's retired.
.PP
Pod::Simple is maintained by:
.IP "\(bu" 4
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR
.IP "\(bu" 4
Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR
.IP "\(bu" 4
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
