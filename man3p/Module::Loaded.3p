.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Loaded 3p"
.TH Module::Loaded 3p "2013-03-25" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Loaded \- mark modules as loaded or unloaded
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Module::Loaded;
\&
\&    $bool = mark_as_loaded(\*(AqFoo\*(Aq);   # Foo.pm is now marked as loaded
\&    $loc  = is_loaded(\*(AqFoo\*(Aq);        # location of Foo.pm set to the
\&                                     # loaders location
\&    eval "require \*(AqFoo\*(Aq";            # is now a no\-op
\&
\&    $bool = mark_as_unloaded(\*(AqFoo\*(Aq); # Foo.pm no longer marked as loaded
\&    eval "require \*(AqFoo\*(Aq";            # Will try to find Foo.pm in @INC
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When testing applications, often you find yourself needing to provide
functionality in your test environment that would usually be provided
by external modules. Rather than munging the \f(CW%INC\fR by hand to mark
these external modules as loaded, so they are not attempted to be loaded
by perl, this module offers you a very simple way to mark modules as
loaded and/or unloaded.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "$bool = mark_as_loaded( \s-1PACKAGE\s0 );"
.el .SS "\f(CW$bool\fP = mark_as_loaded( \s-1PACKAGE\s0 );"
.IX Subsection "$bool = mark_as_loaded( PACKAGE );"
Marks the package as loaded to perl. \f(CW\*(C`PACKAGE\*(C'\fR can be a bareword or
string.
.PP
If the module is already loaded, \f(CW\*(C`mark_as_loaded\*(C'\fR will carp about
this and tell you from where the \f(CW\*(C`PACKAGE\*(C'\fR has been loaded already.
.ie n .SS "$bool = mark_as_unloaded( \s-1PACKAGE\s0 );"
.el .SS "\f(CW$bool\fP = mark_as_unloaded( \s-1PACKAGE\s0 );"
.IX Subsection "$bool = mark_as_unloaded( PACKAGE );"
Marks the package as unloaded to perl, which is the exact opposite
of \f(CW\*(C`mark_as_loaded\*(C'\fR. \f(CW\*(C`PACKAGE\*(C'\fR can be a bareword or string.
.PP
If the module is already unloaded, \f(CW\*(C`mark_as_unloaded\*(C'\fR will carp about
this and tell you the \f(CW\*(C`PACKAGE\*(C'\fR has been unloaded already.
.ie n .SS "$loc = is_loaded( \s-1PACKAGE\s0 );"
.el .SS "\f(CW$loc\fP = is_loaded( \s-1PACKAGE\s0 );"
.IX Subsection "$loc = is_loaded( PACKAGE );"
\&\f(CW\*(C`is_loaded\*(C'\fR tells you if \f(CW\*(C`PACKAGE\*(C'\fR has been marked as loaded yet.
\&\f(CW\*(C`PACKAGE\*(C'\fR can be a bareword or string.
.PP
It returns falls if \f(CW\*(C`PACKAGE\*(C'\fR has not been loaded yet and the location
from where it is said to be loaded on success.
.SH "BUG REPORTS"
.IX Header "BUG REPORTS"
Please report bugs or other issues to <bug\-module\-loaded@rt.cpan.org<gt>.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module by Jos Boumans <kane@cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software; you may redistribute and/or modify it
under the same terms as Perl itself.
