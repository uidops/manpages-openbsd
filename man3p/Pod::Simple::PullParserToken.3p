.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Pod::Simple::PullParserToken 3p"
.TH Pod::Simple::PullParserToken 3p "2021-03-02" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Simple::PullParserToken \-\- tokens from Pod::Simple::PullParser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Given a \f(CW$parser\fR that's an object of class Pod::Simple::PullParser
(or a subclass)...
.PP
.Vb 4
\&  while(my $token = $parser\->get_token) {
\&    $DEBUG and print STDERR "Token: ", $token\->dump, "\en";
\&    if($token\->is_start) {
\&      ...access $token\->tagname, $token\->attr, etc...
\&
\&    } elsif($token\->is_text) {
\&      ...access $token\->text, $token\->text_r, etc...
\&
\&    } elsif($token\->is_end) {
\&      ...access $token\->tagname...
\&
\&    }
\&  }
.Ve
.PP
(Also see Pod::Simple::PullParser)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When you do \f(CW$parser\fR\->get_token on a Pod::Simple::PullParser, you should
get an object of a subclass of Pod::Simple::PullParserToken.
.PP
Subclasses will add methods, and will also inherit these methods:
.ie n .IP "$token\->type" 4
.el .IP "\f(CW$token\fR\->type" 4
.IX Item "$token->type"
This returns the type of the token.  This will be either the string
\&\*(L"start\*(R", the string \*(L"text\*(R", or the string \*(L"end\*(R".
.Sp
Once you know what the type of an object is, you then know what
subclass it belongs to, and therefore what methods it supports.
.Sp
Yes, you could probably do the same thing with code like
\&\f(CW$token\fR\->isa('Pod::Simple::PullParserEndToken'), but that's not so
pretty as using just \f(CW$token\fR\->type, or even the following shortcuts:
.ie n .IP "$token\->is_start" 4
.el .IP "\f(CW$token\fR\->is_start" 4
.IX Item "$token->is_start"
This is a shortcut for \f(CW\*(C`$token\->type() eq "start"\*(C'\fR
.ie n .IP "$token\->is_text" 4
.el .IP "\f(CW$token\fR\->is_text" 4
.IX Item "$token->is_text"
This is a shortcut for \f(CW\*(C`$token\->type() eq "text"\*(C'\fR
.ie n .IP "$token\->is_end" 4
.el .IP "\f(CW$token\fR\->is_end" 4
.IX Item "$token->is_end"
This is a shortcut for \f(CW\*(C`$token\->type() eq "end"\*(C'\fR
.ie n .IP "$token\->dump" 4
.el .IP "\f(CW$token\fR\->dump" 4
.IX Item "$token->dump"
This returns a handy stringified value of this object.  This
is useful for debugging, as in:
.Sp
.Vb 4
\&  while(my $token = $parser\->get_token) {
\&    $DEBUG and print STDERR "Token: ", $token\->dump, "\en";
\&    ...
\&  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
My subclasses:
Pod::Simple::PullParserStartToken,
Pod::Simple::PullParserTextToken, and
Pod::Simple::PullParserEndToken.
.PP
Pod::Simple::PullParser and Pod::Simple
.SH "SUPPORT"
.IX Header "SUPPORT"
Questions or discussion about \s-1POD\s0 and Pod::Simple should be sent to the
pod\-people@perl.org mail list. Send an empty email to
pod\-people\-subscribe@perl.org to subscribe.
.PP
This module is managed in an open GitHub repository,
<https://github.com/perl\-pod/pod\-simple/>. Feel free to fork and contribute, or
to clone <git://github.com/perl\-pod/pod\-simple.git> and send patches!
.PP
Patches against Pod::Simple are welcome. Please send bug reports to
<bug\-pod\-simple@rt.cpan.org>.
.SH "COPYRIGHT AND DISCLAIMERS"
.IX Header "COPYRIGHT AND DISCLAIMERS"
Copyright (c) 2002 Sean M. Burke.
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pod::Simple was created by Sean M. Burke <sburke@cpan.org>.
But don't bother him, he's retired.
.PP
Pod::Simple is maintained by:
.IP "\(bu" 4
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR
.IP "\(bu" 4
Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR
.IP "\(bu" 4
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
