.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Env 3p"
.TH Env 3p "2014-03-24" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Env \- perl module that imports environment variables as scalars or arrays
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Env;
\&    use Env qw(PATH HOME TERM);
\&    use Env qw($SHELL @LD_LIBRARY_PATH);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl maintains environment variables in a special hash named \f(CW%ENV\fR.  For
when this access method is inconvenient, the Perl module \f(CW\*(C`Env\*(C'\fR allows
environment variables to be treated as scalar or array variables.
.PP
The \f(CW\*(C`Env::import()\*(C'\fR function ties environment variables with suitable
names to global Perl variables with the same names.  By default it
ties all existing environment variables (\f(CW\*(C`keys %ENV\*(C'\fR) to scalars.  If
the \f(CW\*(C`import\*(C'\fR function receives arguments, it takes them to be a list of
variables to tie; it's okay if they don't yet exist. The scalar type
prefix '$' is inferred for any element of this list not prefixed by '$'
or '@'. Arrays are implemented in terms of \f(CW\*(C`split\*(C'\fR and \f(CW\*(C`join\*(C'\fR, using
\&\f(CW$Config::Config{path_sep}\fR as the delimiter.
.PP
After an environment variable is tied, merely use it like a normal variable.
You may access its value
.PP
.Vb 2
\&    @path = split(/:/, $PATH);
\&    print join("\en", @LD_LIBRARY_PATH), "\en";
.Ve
.PP
or modify it
.PP
.Vb 2
\&    $PATH .= ":.";
\&    push @LD_LIBRARY_PATH, $dir;
.Ve
.PP
however you'd like. Bear in mind, however, that each access to a tied array
variable requires splitting the environment variable's string anew.
.PP
The code:
.PP
.Vb 2
\&    use Env qw(@PATH);
\&    push @PATH, \*(Aq.\*(Aq;
.Ve
.PP
is equivalent to:
.PP
.Vb 2
\&    use Env qw(PATH);
\&    $PATH .= ":.";
.Ve
.PP
except that if \f(CW$ENV{PATH}\fR started out empty, the second approach leaves
it with the (odd) value "\f(CW\*(C`:.\*(C'\fR\*(L", but the first approach leaves it with \*(R"\f(CW\*(C`.\*(C'\fR".
.PP
To remove a tied environment variable from
the environment, assign it the undefined value
.PP
.Vb 2
\&    undef $PATH;
\&    undef @LD_LIBRARY_PATH;
.Ve
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
On \s-1VMS\s0 systems, arrays tied to environment variables are read-only. Attempting
to change anything will cause a warning.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chip Salzenberg <\fIchip@fin.uucp\fR>
and
Gregor N. Purdy <\fIgregor@focusresearch.com\fR>
