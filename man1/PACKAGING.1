.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PACKAGING 1"
.TH PACKAGING 1 "2019-02-13" "perl v5.32.1" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PACKAGING \- notes and best practice for packaging perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document is aimed at anyone who is producing their own version of
perl for distribution to other users. It is intended as a collection
of useful tips, advice and best practice, rather than being a complete
packaging manual. The starting point for installing perl remains
\&\fI\s-1INSTALL\s0\fR.
.SH "Customizing test running"
.IX Header "Customizing test running"
A small number of porting tests (those in t/porting) are not well suited
to typical distribution packaging scenarios. For example, they assume
they are working in a git clone of the upstream Perl repository, or
enforce rules which are not relevant to downstream packagers. These can
be skipped by setting the environment variable \s-1PERL_BUILD_PACKAGING.
A\s0 complete list of tests which this applied to can be found by searching
the codebase for this string.
.PP
An alternative strategy would be to skip all porting tests, but many of
them are useful if additional patches might be applied.
.SH "Customizing patchlevel to advertise your local patches"
.IX Header "Customizing patchlevel to advertise your local patches"
You can advertise your custom local patches by using patchlevel.h as a
standalone Perl script.
.SS "Sample usage:"
.IX Subsection "Sample usage:"
.Vb 1
\&                perl \-x patchlevel.h "This is a custom patch"
.Ve
.SH "Disabling known flapping tests"
.IX Header "Disabling known flapping tests"
Some tests could fail under heavy load, whereas in most cases
they would simply succeed. Usually, continuous integration systems
will at one point or the other reach that problem.
.PP
To disable these known tests, please set the environment
variable \s-1CI\s0 to true.
.PP
.Vb 1
\&        CI=true
.Ve
